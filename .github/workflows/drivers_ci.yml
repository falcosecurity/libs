name: CI Build
on:
  pull_request:
    paths:
      - driver/**
      - userspace/libscap/**
  push:
    branches:
      - master
      - 'release/**'
      - 'maintainers/**'
    paths:
      - driver/**
      - userspace/libscap/**  
  workflow_dispatch:

# Checks if any concurrent jobs under the same pull request or branch are being executed
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      driver_changed: ${{ steps.filter.outputs.driver }}
      libscap_changed: ${{ steps.filter.outputs.libscap }}
      libsinsp_changed: ${{ steps.filter.outputs.libsinsp }}
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
      id: filter
      with:
        filters: |
          driver:
            - 'driver/**'
          libscap:
            - 'userspace/libscap/**'
          libsinsp:
            - 'userspace/libsinsp/**'

  # This job run all engine tests and scap-open
  test-scap:
    name: test-scap-${{ matrix.arch }} üòÜ (bundled_deps)
    runs-on: ${{ (matrix.arch == 'aarch64' && 'actuated-arm64-8cpu-16gb') || 'ubuntu-22.04' }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout Libs ‚§µÔ∏è
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Install deps ‚õìÔ∏è
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends ca-certificates cmake build-essential clang-14 llvm-14 git pkg-config autoconf automake libtool libelf-dev libcap-dev linux-headers-$(uname -r)
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 90
          sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-14 90
          sudo update-alternatives --install /usr/bin/llc llc /usr/bin/llc-14 90

      - name: Build scap-open and drivers üèóÔ∏è
        run: |
          mkdir -p build
          cd build && cmake -DUSE_BUNDLED_DEPS=On -DBUILD_DRIVER=ON -DBUILD_LIBSCAP_MODERN_BPF=ON -DBUILD_BPF=On -DBUILD_LIBSCAP_GVISOR=On -DCREATE_TEST_TARGETS=On -DENABLE_LIBSCAP_TESTS=On ../
          make scap-open
          make driver bpf
          make libscap_test

      - name: Run scap-open with modern bpf üèéÔ∏è
        run: |
          cd build
          sudo ./libscap/examples/01-open/scap-open --modern_bpf --num_events 10

      - name: Run scap-open with bpf üèéÔ∏è
        run: |
          cd build
          sudo ./libscap/examples/01-open/scap-open --bpf ./driver/bpf/probe.o --num_events 10

      - name: Run scap-open with kmod üèéÔ∏è
        run: |
          cd build
          sudo insmod ./driver/scap.ko
          sudo ./libscap/examples/01-open/scap-open --kmod --num_events 10
          sudo rmmod scap

      - name: Run libscap_test üèéÔ∏è
        run: |
          cd build
          sudo ./test/libscap/libscap_test

  test-drivers:
    name: test-drivers-${{ matrix.arch }} üòá (bundled_deps)
    runs-on: ${{ (matrix.arch == 'aarch64' && 'actuated-arm64-8cpu-16gb') || 'ubuntu-22.04' }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout Libs ‚§µÔ∏è
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Install deps ‚õìÔ∏è
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends ca-certificates cmake build-essential git pkg-config autoconf automake libelf-dev libcap-dev linux-headers-$(uname -r) clang-14 llvm-14 libtool gcc-multilib g++-multilib
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 90
          sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-14 90
          sudo update-alternatives --install /usr/bin/llc llc /usr/bin/llc-14 90

      - name: Build drivers tests üèóÔ∏è
        run: |
          mkdir -p build
          cd build && cmake -DUSE_BUNDLED_DEPS=ON -DENABLE_DRIVERS_TESTS=ON -DBUILD_LIBSCAP_MODERN_BPF=ON -DMODERN_BPF_DEBUG_MODE=ON -DBUILD_BPF=True -DBUILD_LIBSCAP_GVISOR=OFF ../
          make drivers_test
          make driver bpf

      - name: Run drivers_test with modern bpf üèéÔ∏è
        run: |
          cd build
          sudo ./test/drivers/drivers_test -m

      - name: Run drivers_test with bpf üèéÔ∏è
        run: |
          cd build
          sudo ./test/drivers/drivers_test -b

      - name: Run drivers_test with kmod üèéÔ∏è
        run: |
          cd build
          sudo ./test/drivers/drivers_test -k

  build-drivers-s390x-ppc64le:
    name: build-drivers-${{ matrix.arch }} üòÅ (system_deps)
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [s390x, ppc64le]
      fail-fast: false
    env:
      PLATFORM: ${{ matrix.arch == 'ppc64le' && 'powerpc64le' || 's390x' }}
    steps:

      - name: Checkout Libs ‚§µÔ∏è
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@4ed76f16f09d12e83abd8a49e1ac1e5bf08784d4 # v2.5.1
        name: Run ${{ matrix.arch }} build üèóÔ∏è
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}

          install: |
            apt update && apt install -y --no-install-recommends ca-certificates cmake build-essential clang llvm git pkg-config autoconf automake libtool libelf-dev wget libc-ares-dev libcurl4-openssl-dev libssl-dev libtbb-dev libjq-dev libjsoncpp-dev libgrpc++-dev protobuf-compiler-grpc libcap-dev libgtest-dev libprotobuf-dev linux-headers-generic            
            git clone https://github.com/libbpf/bpftool.git --branch v7.0.0 --single-branch
            cd bpftool
            git submodule update --init
            cd src && make install
            cd ../../
            git clone https://github.com/libbpf/libbpf.git --branch v1.0.1 --single-branch
            cd libbpf/src && BUILD_STATIC_ONLY=y DESTDIR=/ make install
            ln -s /usr/lib64/libbpf.a /usr/lib/${{env.PLATFORM}}-linux-gnu/
          # Please note: we cannot inject the BPF probe inside QEMU, so right now, we only build it
          run: |
            git config --global --add safe.directory $GITHUB_WORKSPACE
            .github/install-deps.sh
            mkdir -p build
            cd build && cmake -DBUILD_BPF=On -DUSE_BUNDLED_DEPS=OFF -DMODERN_PROBE_INCLUDE="-I/usr/include/${{env.PLATFORM}}-linux-gnu" -DBUILD_LIBSCAP_MODERN_BPF=ON -DMODERN_BPF_DEBUG_MODE=ON -DENABLE_DRIVERS_TESTS=On -DCREATE_TEST_TARGETS=On -DBUILD_LIBSCAP_GVISOR=OFF ../
            KERNELDIR=/lib/modules/$(ls /lib/modules)/build make driver bpf drivers_test -j6
