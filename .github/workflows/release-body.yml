name: Generate release body for published releases
on:
  release:
    types: [published]

# Checks if any concurrent jobs is running for driver release CI and eventually wait for it.
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release-settings:
    runs-on: ubuntu-latest
    outputs:
      is_latest_drivers: ${{ steps.get_settings.outputs.is_latest_drivers }}
      is_latest_libs: ${{ steps.get_settings.outputs.is_latest_libs }}
    steps:
      - name: Get latest drivers release
        uses: ekoops/actions-github-release@667c095dfa9c26dc09bef7647fed6941254b286a # 0.1.0
        id: latest_drivers_release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          type: "stable"
          filter: '^.*\+driver$' # Only include drivers releases.

      - name: Get latest libs release
        uses: ekoops/actions-github-release@667c095dfa9c26dc09bef7647fed6941254b286a # 0.1.0
        id: latest_libs_release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          type: "stable"
          filter: '^.*(?<!\+driver)$' # Exclude drivers releases.

      - name: Get settings for this release
        id: get_settings
        shell: python
        run: |
          import os
          import re
          import sys

          semver_no_meta = '''^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'''
          tag_name = '${{ github.event.release.tag_name }}'

          is_valid_version = re.match(semver_no_meta, tag_name) is not None
          if not is_valid_version:
            print(f'Release version {tag_name} is not a valid full or pre-release. See RELEASE.md for more information.')
            sys.exit(1)

          is_prerelease = '-' in tag_name

          latest_drivers_release = '${{ steps.latest_drivers_release.outputs.release }}'
          latest_libs_release = '${{ steps.latest_libs_release.outputs.release }}'
          # Safeguard: you need to both set "latest" in GH and not have suffixes to overwrite latest
          is_latest_drivers = tag_name == latest_drivers_release and not is_prerelease
          is_latest_libs = tag_name == latest_libs_release and not is_prerelease

          # Print useful info for debugging purposes.
          print(f'tag name: {tag_name}')
          print(f'latest drivers release: {latest_drivers_release}')
          print(f'latest libs release: {latest_libs_release}')
          print(f'is latest drivers release: {is_latest_drivers}')
          print(f'is latest libs release: {is_latest_drivers}')

          with open(os.environ['GITHUB_OUTPUT'], 'a') as ofp:
            print(f'is_latest_drivers={is_latest_drivers}'.lower(), file=ofp)
            print(f'is_latest_libs={is_latest_libs}'.lower(), file=ofp)

  release-body-libs:
    needs: [release-settings]
    if: ${{ needs.release-settings.outputs.is_latest_libs == 'true' }} # Only for latest libs releases.
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Create release body file
        run: |
          touch release-body.md

      - name: Extract MIN_API version
        run: |
          MIN_API_VER=$(grep SCAP_MINIMUM_DRIVER_API_VERSION userspace/libscap/scap.h)
          prefix="#define SCAP_MINIMUM_DRIVER_API_VERSION PPM_API_VERSION"
          MIN_API_VER=${MIN_API_VER/#$prefix}
          MIN_API_VER=$(echo $MIN_API_VER | tr -d "(" | tr -d ")")
          MIN_API_VER=$(echo $MIN_API_VER | sed -r 's/, /./g')
          echo '!'"[MIN_DRIVER_API](https://img.shields.io/badge/MIN_DRIVER_API-${MIN_API_VER}-yellow)" >> release-body.md

      - name: Extract MIN_SCHEMA version
        run: |
          MIN_SCHEMA_VER=$(grep SCAP_MINIMUM_DRIVER_SCHEMA_VERSION userspace/libscap/scap.h)
          prefix="#define SCAP_MINIMUM_DRIVER_SCHEMA_VERSION PPM_API_VERSION"
          MIN_SCHEMA_VER=${MIN_SCHEMA_VER/#$prefix}
          MIN_SCHEMA_VER=$(echo $MIN_SCHEMA_VER | tr -d "(" | tr -d ")")
          MIN_SCHEMA_VER=$(echo $MIN_SCHEMA_VER | sed -r 's/, /./g')
          echo '!'"[MIN_DRIVER_SCHEMA](https://img.shields.io/badge/MIN_DRIVER_SCHEMA-${MIN_SCHEMA_VER}-yellow)" >> release-body.md
          echo "" >> release-body.md

      - name: Generate release notes
        uses: leodido/rn2md@9c351d81278644c0e17b1ca68edbdba305276c73
        with:
          milestone: ${{ github.event.release.tag_name }}
          output: ./notes.md

      - name: Merge release notes to pre existent body
        run: cat notes.md >> release-body.md

      - name: Attach release creator to release body
        run: |
          echo "" >> release-body.md
          echo "#### Release Manager @${{ github.event.release.author.login }}" >> release-body.md

      - name: Release
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7 # v2.3.4
        with:
          body_path: ./release-body.md
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}

  kernel-tests-release:
    needs: [release-settings]
    if: ${{ needs.release-settings.outputs.is_latest_drivers == 'true' }} # Only for latest drivers releases.
    uses: ./.github/workflows/reusable_kernel_tests.yaml
    with:
      libsversion: ${{ github.event.release.tag_name }}
    secrets: inherit

  release-body-drivers:
    needs: [release-settings, kernel-tests-release]
    if: ${{ needs.release-settings.outputs.is_latest_drivers == 'true' }} # Only for latest drivers releases.
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone libs repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Create release body file
        run: |
          touch release-body.md

      - name: Extract API and SCHEMA versions
        run: |
          touch release-body.md
          API_VERS=$(cat driver/API_VERSION)
          SCHEMA_VERS=$(cat driver/SCHEMA_VERSION)
          echo '!'"[API](https://img.shields.io/badge/API-${API_VERS}-yellow)" >> release-body.md
          echo '!'"[SCHEMA](https://img.shields.io/badge/SCHEMA-${SCHEMA_VERS}-yellow)" >> release-body.md
          echo "" >> release-body.md

      - name: Push badge to latest kernel release
        run: |
          wget https://gist.githubusercontent.com/FedeDP/1cbc5d42edf8e3a02fb75e76625f1072/raw/kernel.json
          # 6.15-rc2 -> 6.15
          # 6.10.6 -> 6.10
          # 6.10 -> 6.10
          KVER=$(cat kernel.json | jq '.message' | tr -d '"' | grep -oE -- '[0-9]+.[0-9]+')
          SUCCESS=$(cat kernel.json | jq '.color' | tr -d '"')
          # If latest run was not successful,
          # revert back to previous kernel release.
          # Of course, the fallback logic is bugged in case minor is 0,
          # as we cannot know which was the previous version.
          # It should not matter until kernel 7.0 :P
          if [[ "$SUCCESS" = "red" ]]; then
            n=${KVER//[!0-9]/ }
            a=(${n//\./ })
            KVER=$(echo "${a[0]}.$((a[1] - 1))")
          fi
          echo '!'"[Latest Compatible Kernel](https://img.shields.io/badge/KERNEL-${KVER}-brightgreen)" >> release-body.md
          echo "" >> release-body.md

      - name: Download matrix X64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: matrix_X64

      - name: Rename X64 matrix
        run: mv matrix.md matrix_X64.md

      - name: Download matrix ARM64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: matrix_ARM64

      - name: Rename ARM64 matrix
        run: mv matrix.md matrix_ARM64.md

      # Steps:
      # Remove everything after the table (ie: since the first line that starts with "# ",
      # ie: a markdown section start.
      # Remove links to the markdown sections in the table too.
      # Then, add a small title to each matrix
      # Finally, merge them together
      - name: Append matrixes to create release body
        run: |
          sed -i -n '/# /q;p' matrix_X64.md
          sed -i -n '/# /q;p' matrix_ARM64.md
          sed -i 's/\[\(.\)\]([^)]*)/\1/g' matrix_X64.md
          sed -i 's/\[\(.\)\]([^)]*)/\1/g' matrix_ARM64.md
          sed -i '1s/^/# Driver Testing Matrix amd64\n\n/' matrix_X64.md
          sed -i '1s/^/# Driver Testing Matrix arm64\n\n/' matrix_ARM64.md
          cat matrix_X64.md matrix_ARM64.md >> release-body.md

      - name: Generate release notes
        uses: leodido/rn2md@9c351d81278644c0e17b1ca68edbdba305276c73 # main
        with:
          milestone: ${{ github.event.release.tag_name }}
          output: ./notes.md

      - name: Merge release notes to pre existent body
        run: cat notes.md >> release-body.md

      - name: Attach release creator to release body
        run: |
          echo "" >> release-body.md
          echo "#### Release Manager @${{ github.event.release.author.login }}" >> release-body.md

      - name: Release
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7 # v2.3.4
        with:
          body_path: ./release-body.md
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
